import { LineItemDTO } from "./dto/LineItemDTO";
import { PaymentItemDTO } from "./dto/PaymentItemDTO";
import { ReturnInfoDTO } from "./dto/ReturnInfoDTO";
import { RowDTO } from "./dto/RowDTO";
import { SellType } from "./dto/SellType";
/**
 * Core builder of commands
 * @date 1/11/2022 - 1:59:01 AM
 *
 * @export
 * @class Core
 * @typedef {Core}
 */
export declare class Core {
    isSerial: boolean;
    /**
     * Constructor default is for WebService
     * @param {Boolean} isSerial
     */
    constructor(isSerial?: boolean);
    /**
     * Builds the main header for the request
     */
    header(): string;
    /**
     * Build the footer for the request
     */
    footer(): string;
    /**
     * Encapsulte the command in the xml 'cmd' tag
     * @param {String} protocolCommand
     */
    cmd(protocolCommand: string): string;
    /**
     * Convert boolean value to 0 and 1
     * false = 0
     * true = 1
     * @date 1/11/2022 - 2:18:03 AM
     *
     * @param {boolean} value
     * @returns {number}
     */
    parseBool(value: boolean): number;
    /**
     * Create the subtotal command =S
     */
    subtotal(): string;
    /**
     * Create the clear command =K
     */
    clear(): string;
    /**
     * Create the cancel(Annullo) command =a
     */
    cancel(): string;
    /**
     * Create the transfer(storno) command =s
     */
    transfer(): string;
    /**
     * Create the paper peek out command(avanzamento scontrino) =f
     */
    paperPeekOut(): string;
    /**
     * Creates  a Department Sell command e.g. =R1/$1000
     * @date 1/11/2022 - 1:51:45 AM
     *
     * @param {number} departmentId
     * @param {string} description
     * @param {number} value
     * @param {number} [qty=1]
     * @param {?SellType} [sellType]
     * @returns {string}
     */
    departmentSell(departmentId: number, description: string, value: number, qty?: number, sellType?: SellType): string;
    /**
     * Creates  a Department Sell command from LineItemDTO e.g. =R1/$1000
     *
     * @param {LineItemDTO} lineItem
     */
    departmentSellFromLineItem(lineItem: LineItemDTO): string;
    /**
     * Opens a return document or check only if it is possibile. IF onlyCheck is false it triggers autoopen if check is ok
     * @date 1/11/2022 - 1:52:14 AM
     *
     * @param {Date} date
     * @param {number} closure
     * @param {number} number
     * @param {?boolean} [onlyCheck]
     * @returns {string}
     */
    returnGoods(date: Date, closure: number, number: number, onlyCheck?: boolean): string;
    /**
     * Opens a return document or check only if it is possibile. IF onlyCheck is false it triggers autoopen if check is ok
     * @date 1/11/2022 - 1:52:45 AM
     *
     * @param {ReturnInfoDTO} returnInfo
     * @returns {string}
     */
    returnGoodsFromDTO(returnInfo: ReturnInfoDTO): string;
    /**
     * Add the lottery code to the receipt e.g. ="/?L/$1/(F1234567)
     *
     * @param {String} code
     */
    lottery(code: string): string;
    /**
     * Create the discount command e.g. =%-/*12.15
     * Percentage is rounded to 2 digits
     *
     * @param {Number} percentage
     * @param {String} description
     */
    discountPercentage(percentage: number, description: string): string;
    /**
     * Create the increase command e.g. =%+/*12.15
     * Percentage is rounded to 2 digits
     *
     * @param {Number} percentage
     * @param {String} description
     */
    increasePercentage(percentage: number, description: string): string;
    /**
     * Create the discount value command e.g. =V-/*12.15
     *
     *
     * @param {Number} value
     * @param {String} description
     */
    discountValue(value: number, description: string): string;
    /**
     * Create the increase value command e.g. =V+/*12.15
     *
     *
     * @param {Number} value
     * @param {String} description
     */
    increaseValue(value: number, description: string): string;
    /**
     * Create the increase value command e.g. =V+/*12.15 after subtotal =S
     *
     * @param {Number} value
     * @param {String} description
     */
    increaseValueSubtotal(value: number, description: string): string;
    /**
     * Open the non fiscal receipt =o
     *
     * header == null => Full header
     * header == false => No Header
     * header == true => Only first Header row
     *
     * @param {Boolean} cutPaper
     * @param {Boolean|null} heading
     */
    openNonFiscalReceipt(cutPaper?: boolean, header?: boolean): string;
    /**
     * Close the non fiscal receipt =o
     */
    closeNonFiscalReceipt(): string;
    /**
     * Create the payment command e.g. =T3/$2000
     *
     * @param {Number} paymentId
     * @param {Number} value
     * @param {String|null} description
     */
    payment(paymentId: number, value?: number, qty?: number, description?: string): string;
    /**
     * Create the payment command e.g. =T3/$2000
     * @date 1/11/2022 - 1:54:00 AM
     *
     * @param {PaymentItemDTO} paymentItem
     * @returns {string}
     */
    paymentFromPaymentItem(paymentItem: PaymentItemDTO): string;
    /**
     * Return a receipt providing date closure and number, if onlyCheck is set then checks if true and check&run if false
     *
     * @param {String} date
     * @param {Number} closure
     * @param {Number} number
     * @param onlyCheck
     * @param serialNumber
     */
    returnReceipt(date: Date, closure: number, number: number, onlyCheck?: boolean, serialNumber?: string): string;
    /**
     * Return a receipt providing date closure and number, if onlyCheck is set then checks if true and check&run if false
     *
     * @param {ReturnInfoDTO} returnInfo
     */
    returnReceiptFromDTO(returnInfo: ReturnInfoDTO): string;
    /**
     * get the last document printed
     */
    getLastReceipt(): string;
    /**
     * command to print the last receipt without the amounts of the articles, called “Receipt Gift "(in REG)
     */
    giftReceipt(): string;
    /**
     * Create the operator command e.g. =O1
     *
     * @param {Number} operatorId
     */
    operator(operatorId: number): string;
    /**
     * Create the receipt close command =c
     */
    closeReceipt(): string;
    /**
     * Terminates the current operation =x
     */
    terminateOperation(): string;
    /**
     * Create the command for alfanumeric rows ="/?A/(Prova stampa alfanumerica)
     *
     * @param {String|RowDTO} content
     */
    printRow(content: string | RowDTO): string;
    /**
     * Create the command for alfanumeric rows after total =”/&1/(descrizione 35 chars)
     *
     * @param {String} content
     */
    printRowAfterTotal(content: string): string;
    /**
     * Create the command for alfanumeric rows before fiscal content ="/(stringa alfanumerica)/&1
     *
     * @param {String} content
     */
    printRowBeforeFiscalContent(content: string): string;
    /**
     * Create the command for printing Fiscal Code ="/?C/(01033470251)
     * The fiscal code is not check in its format
     *
     * @param {String} fiscalCode
     */
    printFiscalCode(fiscalCode: string): string;
    /**
     * Enter in reg key =C1
     */
    reg(): string;
    /**
     * Enter in x report key =C2
     */
    x(): string;
    /**
     * Enter in z report key =C3
     */
    z(): string;
    /**
     * Enter in prog key =C4
     */
    prg(): string;
    /**
     * Enter in service key =C5
     */
    srv(): string;
    /**
     * Read daily situation (x report)
     */
    xReport(): string;
    /**
     * Do fiscal closure (z report)
     */
    zReport(): string;
    /**
     * Restart the printer
     */
    restart(): string;
    /**
     * Send the update on demand command
     */
    updateOnDemand(): string;
    /**
     * Try resend pending XML
     */
    sendPendingXmls(): string;
    /**
     * Test Agenzia delle Entrate endpoint
     */
    testXmlUrl(): string;
    /**
     *
     * @param {Number} rowId
     * @param {String} message
     */
    displayMessage(rowId: number, message: string): string;
    /**
     * Create the Create BarCode command ="/$2/(4006381333641)
     * @param {Number} type
     * @param {String} code
     */
    printBarCode(type: number, code: string): string;
    /**
     * Create BarCode of type: UPC-E
     * @param {String} code
     */
    printBarCode_UpcE(code: string): string;
    /**
     * Create BarCode of type: EAN-13
     * @param {String} code
     */
    printBarCode_Ean13(code: string): string;
    /**
     * Create BarCode of type: EAN-8
     * @param {String} code
     */
    printBarCode_Ean8(code: string): string;
    /**
     * Create BarCode of type: CODE-39
     * @param {String} code
     */
    printBarCode_Code39(code: string): string;
    /**
     * Create BarCode of type: UPC-A
     * @param {String} code
     */
    printBarCode_UpcA(code: string): string;
    /**
     * Create BarCode of type: ITF
     * @param {String} code
     */
    printBarCode_Itf(code: string): string;
    /**
     * Create BarCode of type: CODABAR
     * @param {String} code
     */
    printBarCode_Codabar(code: string): string;
    /**
     * Create BarCode of type: CODE-128
     * @param {String} code
     */
    printBarCode_Code128(code: string): string;
    /**
     * Create BarCode of type: CODE-93
     * @param {String} code
     */
    printBarCode_Code93(code: string): string;
    /**
     * Create BarCode of type: QR CODE
     * @param {String} code
     */
    printBarCode_QRCode(code: string): string;
    /**
     * Get the DGFE Status
     */
    dgfeStatus(): string;
    /**
     * Send the periodic assessment command
     */
    periodicAssessmentStatus(): string;
    /**
     * Send the inactivity and pendings command
     */
    inactivityAndPendings(): string;
    /**
     * Check DGFE free space
     */
    dgfeFreeSpace(): string;
    /**
     * Verify the status of print <<?s
     */
    deviceStatus(): string;
    /**
     * Check the printer status
     */
    printerStatus(): string;
    /**
     *   Device Serial number <</?m
     */
    getSerialNumber(): string;
    /**
     *  Device Firware Revision <</?f
     */
    getFirmwareRevision(): string;
    /**
     * Check RT status
     */
    rtStatus(): string;
    /**
     * Check pending XML status
     */
    pendingXmlStatus(): string;
    /**
     * Check if the RT is in service
     */
    inServiceStatus(): string;
    /**
     * Get all programming
     */
    allProgramming(): string;
    /**
     * Program a the Vat on ticket
     *
     * @param {Boolean} vat_on_ticket
     */
    C125(vat_on_ticket: boolean): string;
    /**
     * Program the midnight alert
     *
     * @param {Boolean} midnight_alert
     */
    C126(midnight_alert: boolean): string;
    /**
     * program the print of the register number
     *
     * @param {Boolean} print_register_number
     */
    C132(print_register_number: boolean): string;
    /**
     * Program id the subtotal is required
     *
     * @param {Boolean} subtotal_required
     */
    C133(subtotal_required: boolean): string;
    /**
     * Program the maximum receipt amount
     *
     * @param {Number} max_receipt_amount
     */
    C135(max_receipt_amount: number): string;
    /**
     * Program the change on payments
     *
     * @param {Boolean} change_on_payments
     */
    C136(change_on_payments: boolean): string;
    /**
     * Program the deprtment net
     * @param {Boolean} department_net
     */
    C138(department_net: boolean): string;
    /**
     * Program the appendix in the rt
     *
     * @param {Boolean} rt_print_appendix
     * @param {Boolean} rt_enable_appendix_Cut
     */
    C170(rt_print_appendix: boolean, rt_enable_appendix_Cut: boolean): string;
    /**
     * Download DGFE data at specific date format DDMMYY e.g. 010121 (January 1st 2021)
     *
     * @param {String} date
     */
    C451(from: Date, to: Date): string;
    /**
     * Download DGFE data at specific date format DDMMYY e.g. 010121 (January 1st 2021)
     *
     * @param {String} date
     */
    C452(date: string): string;
    /**
     * Program the invoice on the rt
     *
     * @param {Boolean} invoice_on_receipt_enable
     * @param {Boolean} receipt_print_on_2_lines
     * @param {Boolean} invoice_subtotal_enable
     * @param {Boolean} invoice_disable_check_client
     * @param {Boolean} invoice_print_unit_price
     */
    C917(invoice_on_receipt_enable: boolean, receipt_print_on_2_lines: boolean, invoice_subtotal_enable: boolean, invoice_disable_check_client: boolean, invoice_print_unit_price: boolean): string;
    /**
     * Program one specific header line >C918/*1/$1/(Testo max 48 caratteri)
     * text is trimmed and equally spaced to center the content
     *
     * @param {Number} id
     * @param {String} name
     */
    C918(id: number, name: string): string;
    /**
     * Program unit price and single quantity
     *
     * @param {Boolean} print_unit_price
     * @param {Boolean} print_single_quantity
     */
    C927(print_unit_price: boolean, print_single_quantity: boolean): string;
    /**
     * Program the disable double feed
     *
     * @param {Boolean} disable_double_feed
     */
    C928(disable_double_feed: boolean): string;
    /**
     * Program the print with buffering
     *
     * @param {Boolean} print_with_buffering
     */
    C932(print_with_buffering: boolean): string;
    /**
     * Program the notify cash
     *
     * @param {Boolean} notify_cash
     */
    C980(notify_cash: boolean): string;
    /**
     * Enables the cutter
     *
     * @param {Boolean} enabled_cutter
     */
    C997(enabled_cutter: boolean): string;
    /**
     * Program the heading rows (0-6)
     * and the Invoice heading rows (7-13)
     *
     * @param {Number} headingRow
     * @param {String} description
     */
    H(headingRow: number, description: string): string;
    /**
     * Program the cortesy lines rows (0-2)
     *
     * @param {Number} courtesyRow
     * @param {String} description
     */
    t(courtesyRow: number, description: string): string;
    /**
     * Program an operator
     *
     * @param {Number} operatorId
     * @param {String} name
     */
    O(operatorId: number, name: string): string;
    /**
     * Program a Department
     *
     * @param {Number} deptId
     * @param {Number} price
     * @param {Number} vat
     * @param {String} name
     * @param {Number} halo
     * @param {Number} lalo
     * @param {Boolean} single
     * @param {Number|null} grp_code
     * @param {String} dpt_type
     */
    R(deptId: number, price: number, vat: number, name: string, halo: number, lalo: number, single: boolean, grp_code: number | null, dpt_type: number): string;
    /**
     * Program a payment
     *
     * @param {Number} paymentId
     * @param {String} name
     * @param {Boolean} change
     * @param {Boolean} cash
     * @param {Boolean} pay_discount
     * @param {String} tender_credit_type
     * @param {Boolean} opendrawer
     * @param {Boolean} input_total_amount
     * @param {Boolean} ticket
     */
    T(paymentId: number, name: string, change: boolean, cash: boolean, pay_discount: boolean, tender_credit_type: number, opendrawer: boolean, input_total_amount: boolean, ticket: boolean): string;
    /**
     * Program department discount
     *
     * @param {Boolean} department_discount
     */
    U(department_discount: boolean): string;
    /**
     * Program a vat
     *
     * @param {Number} vatId
     * @param {String} rate_type
     * @param {Number} value
     * @param {String} ateco_code
     */
    V(vatId: number, rate_type: string, value: number, ateco_code: string): string;
    /**
     * Util to convert Department type string to integer
     * @param {String} val
     */
    dptTypeStringToInt(val: string): string;
    /**
     * Util to convert Department type int to string
     * @param {Number} val
     */
    dptIntToTypeString(val: number): string;
    /**
     * Util to convert rate type string to integer
     * @param {String} value
     */
    rateStringToInt(value: string): number | null;
    /**
     * Util to convert nature type string to integer
     * @param {String} value
     */
    natureStringToInt(value: string): number | null;
    /**
     * Util to convert credit type string to integer
     * @param {String} tender_credit_type
     */
    creditStringToInt(tender_credit_type: string): number | null;
    /**
     * Util to convert credit type integer to string
     * @param {Number} tender_credit_type
     */
    creditIntToString(tender_credit_type: number): string;
    getCurrentDateTime(): string;
    getCurrentSubTotal(): string;
    getCorrispettivoFiscale(): string;
    getTotalReturns(): string;
    getTotalCancelled(): string;
    getTotalCredits(): string;
    getTotalZeroingNumber(): string;
    getGrandTotal(): string;
    getHwInitNumber(): string;
    getLastNotFiscalDocumentNumber(): string;
    getCashierNumber(): string;
    getLastInvoiceNumber(): string;
    getDailyCreditNoteNumber(): string;
    getAnnualCreditNoteNumber(): string;
    getEthernetSettings(): string;
}
