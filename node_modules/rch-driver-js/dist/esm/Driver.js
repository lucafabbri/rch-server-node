"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Driver = void 0;
const tslib_1 = require("tslib");
const ComConst_1 = require("./ComConst");
const EcrDevice_1 = require("./EcrDevice");
const Prog_1 = require("./models/Prog");
const RchProtocol_1 = require("./protocol/RchProtocol");
const RchDefault_1 = require("./RchDefault");
const Utils_1 = require("./Utils");
const RchMessage_1 = require("./protocol/RchMessage");
const PrinterStatus_1 = require("./printer/PrinterStatus");
const DeviceStatus_1 = require("./printer/DeviceStatus");
const printer_1 = require("./printer");
const DayLightSavingTimeAndPeriodCheck_1 = require("./printer/DayLightSavingTimeAndPeriodCheck");
const InactivityAndPendings_1 = require("./printer/InactivityAndPendings");
const ConnectionConst_1 = require("./ConnectionConst");
const net_1 = require("net");
const Crawler_1 = require("./network/Crawler");
const serialport_1 = require("serialport");
const luxon_1 = require("luxon");
const _1 = require(".");
const ClosureVat_1 = require("./ClosureVat");
const ClosurePayment_1 = require("./ClosurePayment");
const ClosureDiscount_1 = require("./ClosureDiscount");
const RegexUtils_1 = require("./RegexUtils");
const rch_driver_js_core_1 = require("rch-driver-js-core");
const groupBy = (list, getKey) => list.reduce((previous, currentItem) => {
    const group = getKey(currentItem);
    if (!previous[group])
        previous[group] = [];
    previous[group].push(currentItem);
    return previous;
}, {});
/**
 * Driver
 * @date 1/11/2022 - 2:22:47 AM
 *
 * @module rch-driver-js
 * @export
 * @class Driver
 * @typedef {Driver}
 * @implements {IDriver}
 */
class Driver {
    /**
     * Creates an instance of Driver.
     * @date 1/11/2022 - 3:58:28 PM
     */
    constructor() {
        this.connection = ConnectionConst_1.ConnectionConst.TCPIP;
        this.comPort = 'COM3';
        this.baudRate = 9600;
        this.ip = '192.168.1.10';
        this.ipPort = 23;
        this.packIds = '01234567879abcdefghijklmnopqrstuvwxyzaABCDEFGHIJKLMNOPQRSTUVWXYZ';
        this.packId = 0;
        this.commandEventListeners = [];
        this.isETX = false;
        this.buffer = [];
        this.sessionCommands = {};
        this.logTag = '[Driver]: ';
        this.client = null;
        this.core = new rch_driver_js_core_1.Core();
    }
    /**
     * @inheritdoc
     */
    buildProgCommands(prog, printerType, sendHeadings) {
        var core = new rch_driver_js_core_1.Core();
        var commands = [];
        commands.push({
            description: 'Clear',
            cmd: core.clear(),
        });
        commands.push({
            description: 'Chiave programmazioni',
            cmd: core.prg(),
        });
        if (printerType == _1.DeviceType.PRINTF) {
            var midnightAlert = {
                description: 'Avviso di mezzanotte',
            };
            midnightAlert.cmd = core.C126(prog.midnightAlert);
            commands.push(midnightAlert);
            var printECRNum = {
                description: 'Numero ECR',
            };
            printECRNum.cmd = core.C132(prog.printECRNum);
            commands.push(printECRNum);
            var invoiceSubtotal = {
                description: 'Fattura subtotale',
            };
            invoiceSubtotal.cmd = core.C133(prog.invoiceSubtotal);
            commands.push(invoiceSubtotal);
            var showChange = {
                description: 'Mostra resto',
            };
            showChange.cmd = core.C136(prog.showChange);
            commands.push(showChange);
            var c917 = {
                description: 'Impostazioni fattura',
            };
            c917.cmd = core.C917(prog.intInvoice, prog.invoice2Lines, prog.invoiceSubtotal, prog.invoiceClientCheck, true);
            commands.push(c917);
            if (prog.singleQuantity) {
                commands.push({
                    description: 'Stampa singola quantità',
                    cmd: core.C927(prog.singleQuantity, prog.singleQuantity),
                });
            }
            else {
                commands.push({
                    description: 'Stampa singola quantità',
                    error: 'manca valore',
                });
            }
            if (prog.printBuffer) {
                commands.push({
                    description: 'Abilitazione buffer',
                    cmd: core.C932(prog.printBuffer),
                });
            }
            else {
                commands.push({
                    description: 'Abilitazione buffer',
                    error: 'manca valore',
                });
            }
            if (prog.cutter) {
                commands.push({
                    description: 'Abilitazione taglierina',
                    cmd: core.C997(prog.cutter),
                });
            }
            else {
                commands.push({
                    description: 'Abilitazione taglierina',
                    error: 'manca valore',
                });
            }
            for (var i = 0; i < prog.invoiceText.length; i++) {
                commands.push({
                    description: 'Intestazione fattura, riga ' + prog.invoiceText[i].id,
                    cmd: '>C918/*1/$' + prog.invoiceText[i].id + '/(' + prog.invoiceText[i].name + ')',
                });
            }
        }
        var availableClerks = printerType == _1.DeviceType.LDP33RT ? prog.operators.slice(0, 4) : printerType == _1.DeviceType.ONDART || printerType == _1.DeviceType.ONDARTA || printerType == _1.DeviceType.SPOTRT ? prog.operators.slice(0, 4) : prog.operators;
        availableClerks.forEach((item) => {
            if (item.name != '' && item.name != null) {
                commands.push({
                    description: 'Operatore ' + item.id + ' ' + item.name,
                    cmd: core.O(item.id, item.name),
                });
            }
        });
        var availableDepts = printerType == _1.DeviceType.LDP03 ? prog.departments.slice(0, 10) : printerType == _1.DeviceType.ONDART || printerType == _1.DeviceType.ONDARTA || printerType == _1.DeviceType.SPOTRT ? prog.departments.slice(0, 10) : prog.departments;
        availableDepts.forEach((item) => {
            if (this.validateDepartment(prog, item)) {
                commands.push({
                    description: 'Reparto ' + item.id + ' (' + item.name + ')',
                    cmd: core.R(item.id, item.price, item.vatCode, item.name, item.halo, item.lalo, item.single, item.groupCode, item.departmentType),
                });
            }
            else {
                commands.push({
                    description: 'Reparto ' + item.id + ' (' + item.name + ')',
                    error: 'reparto non valido',
                });
            }
        });
        var availablePayments = printerType == _1.DeviceType.LDP33RT ? prog.payments.slice(0, 10) : printerType == _1.DeviceType.ONDART || printerType == _1.DeviceType.ONDARTA || printerType == _1.DeviceType.SPOTRT ? prog.payments.slice(0, 10) : prog.payments;
        availablePayments.forEach((item) => {
            if (this.validateTender(item)) {
                commands.push({
                    description: 'Pagamento ' + item.id + ' ' + item.name,
                    cmd: core.T(item.id, item.name, item.change, item.cash, item.payDiscount, item.creditType, item.drawer, item.inputTotalAmount, item.ticket),
                });
            }
            else {
                commands.push({
                    description: 'Pagamento ' + item.id + ' ' + item.name,
                    error: 'pagamento non valido',
                });
            }
        });
        var availableVats = printerType == _1.DeviceType.LDP33RT ? prog.vats.slice(0, 13) : printerType == _1.DeviceType.ONDART || printerType == _1.DeviceType.ONDARTA || printerType == _1.DeviceType.SPOTRT ? prog.vats.slice(0, 13) : prog.vats;
        availableVats.forEach((item) => {
            commands.push({
                description: 'IVA ' + item.id,
                cmd: core.V(item.id, item.type, item.value != undefined ? item.value : 0, item.ateco),
            });
        });
        if (sendHeadings) {
            var availbleHeadings = printerType == _1.DeviceType.PRINTF ? prog.headings : prog.headings.slice(0, 6);
            availbleHeadings.forEach((item) => {
                var _a;
                commands.push({
                    description: 'Intestazione ' + item.id,
                    cmd: core.H(item.id, (_a = item.name) !== null && _a !== void 0 ? _a : ''),
                });
            });
        }
        prog.courtesyLines.forEach((item) => {
            commands.push({
                description: 'Riga di cortesia ' + item.id,
                cmd: core.t(item.id, item.name),
            });
        });
        commands.push({
            description: 'Clear',
            cmd: core.clear(),
        });
        commands.push({
            description: 'Chiave registratore',
            cmd: core.reg(),
        });
        return commands;
    }
    validateTender(item) {
        return !(!item.cash && !item.credit && !item.payDiscount && !item.ticket && item.creditType != 0);
    }
    validateDepartment(prog, item) {
        var _a, _b;
        return !((_b = (item.departmentType == 1 && ((_a = prog.vats.find((v) => v.id == item.vatCode)) === null || _a === void 0 ? void 0 : _a.type) == 'VI')) !== null && _b !== void 0 ? _b : false);
    }
    initConnection() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                var _a, _b;
                switch (this.connection) {
                    case ConnectionConst_1.ConnectionConst.SERIAL:
                        if (this.comPort && this.baudRate) {
                            this.client = new serialport_1.SerialPort({
                                path: this.comPort,
                                baudRate: this.baudRate,
                                autoOpen: false,
                            });
                            (_a = this.client) === null || _a === void 0 ? void 0 : _a.on('close', () => {
                                console.log(this.logTag + 'connection closed');
                            });
                            this.client.once('error', (error) => {
                                var _a;
                                console.error(error);
                                (_a = this.client) === null || _a === void 0 ? void 0 : _a.end();
                                reject(false);
                            });
                            this.client.once('open', () => {
                                var _a, _b;
                                console.log(this.logTag + 'connection open');
                                (_a = this.client) === null || _a === void 0 ? void 0 : _a.removeAllListeners('error');
                                (_b = this.client) === null || _b === void 0 ? void 0 : _b.on('error', (error) => {
                                    console.error(error);
                                });
                                resolve(true);
                            });
                            this.client.open((err) => {
                                var _a;
                                console.error(err);
                                (_a = this.client) === null || _a === void 0 ? void 0 : _a.end();
                                reject(false);
                            });
                        }
                        else {
                            reject(false);
                        }
                        break;
                    case ConnectionConst_1.ConnectionConst.TCPIP:
                    default:
                        if (this.ip && this.ipPort) {
                            this.client = (0, net_1.createConnection)(this.ipPort, this.ip, () => {
                                var _a, _b;
                                console.log(this.logTag + 'connection open');
                                (_a = this.client) === null || _a === void 0 ? void 0 : _a.removeAllListeners('error');
                                (_b = this.client) === null || _b === void 0 ? void 0 : _b.on('error', (error) => {
                                    var _a;
                                    console.error(error);
                                    (_a = this.client) === null || _a === void 0 ? void 0 : _a.end();
                                });
                                resolve(true);
                            });
                            (_b = this.client) === null || _b === void 0 ? void 0 : _b.on('close', () => {
                                console.log(this.logTag + 'connection closed');
                            });
                            this.client.once('error', (error) => {
                                var _a;
                                console.error(error);
                                (_a = this.client) === null || _a === void 0 ? void 0 : _a.end();
                                reject(false);
                            });
                        }
                        else {
                            reject(false);
                        }
                        break;
                }
            });
        });
    }
    /**
     * @inheritdoc
     */
    open(configuration) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            this.connection = configuration.connection;
            this.ip = configuration.ip;
            this.ipPort = configuration.ipPort;
            this.comPort = configuration.comPort;
            this.baudRate = configuration.baudRate;
            return yield this.initConnection();
        });
    }
    /**
     * @inheritdoc
     */
    close() {
        return new Promise((resolve, reject) => {
            var _a;
            try {
                if (this.client && !this.client.destroyed) {
                    (_a = this.client) === null || _a === void 0 ? void 0 : _a.destroy();
                }
                resolve(true);
            }
            catch (e) {
                console.error(this.logTag + e);
                reject(e);
            }
        });
    }
    /**
     * @inheritdoc
     */
    discovery() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let result = [];
            try {
                this.connection = ConnectionConst_1.ConnectionConst.SERIAL;
                let ports = yield serialport_1.SerialPort.list();
                for (let i = 0; i < ports.length; i++) {
                    let port = ports[i];
                    let device = new EcrDevice_1.EcrDevice();
                    device.baudRate = 9600;
                    device.comPort = port.path;
                    this.comPort = port.path;
                    this.baudRate = 9600;
                    console.debug(this.logTag + '#discovery on Serial Port: ' + port.path);
                    try {
                        let d = yield this.populateDevice(device);
                        if (d != null) {
                            console.debug(d);
                            result.push(d);
                        }
                        else {
                            console.debug(this.logTag + '#discovery Device Not Found on Serial Port: ' + port.path);
                        }
                    }
                    catch (pe) {
                        console.error(this.logTag + '#discovery ' + pe);
                    }
                }
            }
            catch (e) {
                console.error(this.logTag + '#discovery ' + e);
            }
            try {
                this.connection = ConnectionConst_1.ConnectionConst.TCPIP;
                let devices = yield Crawler_1.Crawler.ping_all();
                for (let i = 0; i < devices.length; i++) {
                    let device = devices[i];
                    device.ipPort = 23;
                    this.ip = device.ip;
                    this.ipPort = 23;
                    try {
                        console.debug(this.logTag + '#discovery on TCP/IP: ' + device.ip);
                        let d = yield this.populateDevice(device);
                        if (d != null) {
                            console.debug(d);
                            result.push(d);
                        }
                        else {
                            console.debug(this.logTag + '#discovery Device Not Found on TCP/IP: ' + device.ip);
                        }
                    }
                    catch (pe) {
                        console.error(this.logTag + '#discovery ' + pe);
                    }
                }
            }
            catch (e) {
                console.error(this.logTag + '#discovery ' + e);
            }
            return result;
        });
    }
    /**
     * @inheritdoc
     */
    discoverByIp(ip) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let result = null;
            try {
                this.connection = ConnectionConst_1.ConnectionConst.TCPIP;
                let device = new EcrDevice_1.EcrDevice();
                device.ipPort = 23;
                device.ip = ip;
                this.ip = ip;
                this.ipPort = 23;
                try {
                    console.debug(this.logTag + '#discovery on TCP/IP: ' + device.ip);
                    let d = yield this.populateDevice(device);
                    if (d != null) {
                        console.debug(d);
                        result = d;
                    }
                    else {
                        console.debug(this.logTag + '#discovery Device Not Found on TCP/IP: ' + device.ip);
                    }
                }
                catch (pe) {
                    console.error(this.logTag + '#discovery ' + pe);
                }
            }
            catch (e) {
                console.error(this.logTag + '#discovery ' + e);
            }
            return result;
        });
    }
    /**
     * @inheritdoc
     */
    addCommandEventListener(listner) {
        this.commandEventListeners.push(listner);
        return () => {
            this.commandEventListeners.splice(this.commandEventListeners.indexOf(listner), 1);
        };
    }
    /**
     * @inheritdoc
     */
    sendCommand(command) {
        return new Promise((resolve, reject) => {
            var _a, _b;
            let result;
            try {
                let bytesRead = 0;
                let onDataListener = (data) => {
                    var _a;
                    try {
                        bytesRead = data.buffer.byteLength;
                        if (bytesRead > 0) {
                            let dataRead = this.readData(Buffer.from(data.toString(), 'ascii'));
                            if (dataRead.length > 0) {
                                result.response = result.response.concat(dataRead.map((d) => new RchMessage_1.RchMessage(d)));
                            }
                        }
                    }
                    catch (_b) {
                        bytesRead = 0;
                    }
                    if (this.isETX) {
                        this.onCommand(result);
                        resolve(result);
                    }
                    else {
                        (_a = this.client) === null || _a === void 0 ? void 0 : _a.once('data', onDataListener);
                    }
                };
                (_a = this.client) === null || _a === void 0 ? void 0 : _a.once('data', onDataListener);
                let byteSend = this.formatCommandToByteArray(command);
                let bufferSend = Buffer.from(byteSend);
                result = new RchProtocol_1.RchProtocol(bufferSend.slice(1, bufferSend.length - 1).toString('ascii'));
                (_b = this.client) === null || _b === void 0 ? void 0 : _b.write(bufferSend, 'ascii', (error) => {
                    if (error) {
                        reject(error.message);
                    }
                });
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     * @inheritdoc
     */
    sendCommands(commands) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let results = [];
            try {
                for (let i = 0; i < commands.length; i++) {
                    results = results.concat(yield this.sendCommand(commands[i]));
                }
            }
            catch (e) {
                console.log(e);
            }
            return results;
        });
    }
    /**
     * @inheritdoc
     */
    formatCommandToByteArray(command) {
        let result = [];
        this.packId = this.packId == this.packIds.length - 1 ? 0 : this.packId + 1;
        result.push(ComConst_1.ComConst.CHR_STX); //<STX>
        result.push(...Buffer.from('01')); //<ADDS>
        result.push(...Buffer.from(command.length.toString().padStart(3, '0'))); //<LUNGH>
        result.push(...Buffer.from(ComConst_1.ComConst.CHR_NUOVOPROTOCOLLO)); //<PROT-ID>
        result.push(...Buffer.from(command)); //<DATI>
        result.push(this.packIds.charCodeAt(this.packId)); //<PACK-ID>
        result.push(...Buffer.from(this.calculateBcc(result))); //<CHK>
        result.push(ComConst_1.ComConst.CHR_ETX); //<ETX>
        return result;
    }
    setTimeOut(command) {
        var _a;
        return (_a = ComConst_1.ComConst.hashtableAPP[command]) !== null && _a !== void 0 ? _a : ComConst_1.ComConst.Cmd_Timeout;
    }
    calculateBcc(items) {
        return Utils_1.Utils.calculateBcc(items);
    }
    populateDevice(device) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                if (yield this.initConnection()) {
                    let rchDefaults = new RchDefault_1.RchDefault();
                    let sendCommandResult = yield this.sendCommand(this.core.getSerialNumber());
                    if (sendCommandResult.isSuccess) {
                        let response = sendCommandResult.response[0];
                        if (!response.isError) {
                            device.serialNumber = Utils_1.Utils.toRtFormat(response.data.replace(/[ ]/, ''));
                            device.type = _1.DeviceType.fromSerialNumber(device.serialNumber);
                            let fwRevisionResult = yield this.sendCommand(this.core.getFirmwareRevision());
                            if (fwRevisionResult.isSuccess) {
                                device.fwVersionLabel = fwRevisionResult.response[0].data;
                            }
                            let deviceCapability = rchDefaults.getDeviceCapability(device.type, device.fwVersion);
                            if (deviceCapability != null) {
                                device.hasProgDump = deviceCapability.hasProgDump;
                                device.hasDgfeFreeSpace = deviceCapability.hasDgfeFreeSpace;
                                device.nDepartments = deviceCapability.nDepartments;
                                device.nOperators = deviceCapability.nOperators;
                                device.nPayments = deviceCapability.nPayments;
                                device.nVats = deviceCapability.nVats;
                                if (deviceCapability.hasProgDump) {
                                    device.prog = yield this.allProgramming();
                                }
                                if (!device.prog) {
                                    device.prog = rchDefaults.getProgByDevice(device.type, device.fwVersion);
                                }
                            }
                            yield this.close();
                            return device;
                        }
                    }
                }
            }
            catch (e) {
                console.error(this.logTag + '#populateDevice ' + e);
            }
            yield this.close();
            return null;
        });
    }
    /**
     * @inheritdoc
     */
    dumpDGFE(from, to) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let dgfe = {};
            dgfe.from = from;
            dgfe.to = to;
            dgfe.closures = [];
            dgfe.receipts = [];
            try {
                yield this.sendCommand(this.core.z());
                let sendCommandResult = yield this.sendCommand(this.core.C451(from, to));
                if (sendCommandResult.isSuccess) {
                    let rows = sendCommandResult.responseBody.join('\n');
                    let m;
                    while ((m = RegexUtils_1.RegexUtils.fiscalDocumentPattern.exec(rows)) !== null) {
                        // This is necessary to avoid infinite loops with zero-width matches
                        if (m.index === RegexUtils_1.RegexUtils.fiscalDocumentPattern.lastIndex) {
                            RegexUtils_1.RegexUtils.fiscalDocumentPattern.lastIndex++;
                        }
                        let receipt = new _1.Receipt();
                        let groups = m.groups;
                        if (groups) {
                            dgfe.receipts.push(this.fillReceipt(groups, receipt));
                        }
                    }
                    while ((m = RegexUtils_1.RegexUtils.fiscalReportPattern.exec(rows)) !== null) {
                        // This is necessary to avoid infinite loops with zero-width matches
                        if (m.index === RegexUtils_1.RegexUtils.fiscalReportPattern.lastIndex) {
                            RegexUtils_1.RegexUtils.fiscalReportPattern.lastIndex++;
                        }
                        let closure = new _1.Closure();
                        let groups = m.groups;
                        if (groups) {
                            closure.raw = groups['raw'];
                            closure.date = luxon_1.DateTime.fromFormat(groups['datetime'], 'dd-LL-yyyy HH:mm', { locale: 'it-IT' }).toJSDate();
                            closure.closure = parseInt(groups['closure']);
                            closure.number = parseInt(groups['number']);
                            if (groups['sells']) {
                                closure.sells = parseInt(groups['sells']);
                            }
                            if (groups['grandTotal']) {
                                closure.grandTotal = parseInt(groups['grandTotal'].replace(/[\.,]/g, ''));
                            }
                            if (groups['invoices']) {
                                closure.invoices = parseInt(groups['invoices']);
                            }
                            if (groups['invoicesTotal']) {
                                closure.invoicesTotal = parseInt(groups['invoicesTotal'].replace(/[\.,]/g, ''));
                            }
                            if (groups['cancelledDocumentsTotal']) {
                                closure.cancelledDocumentsTotal = parseInt(groups['cancelledDocumentsTotal'].replace(/[\.,]/g, ''));
                            }
                            if (groups['fiscalDocuments']) {
                                closure.fiscalDocuments = parseInt(groups['fiscalDocuments']);
                            }
                            if (groups['managementDocuments']) {
                                closure.managementDocuments = parseInt(groups['managementDocuments']);
                            }
                            if (groups['summaryReadings']) {
                                closure.summaryReadings = parseInt(groups['summaryReadings']);
                            }
                            if (groups['restores']) {
                                closure.restores = parseInt(groups['restores']);
                            }
                            if (groups['dgfeNumber']) {
                                closure.dgfeNumber = parseInt(groups['dgfeNumber']);
                            }
                            if (groups['fiscalSeal']) {
                                closure.fiscalSeal = groups['fiscalSeal'];
                            }
                            if (groups['vats']) {
                                let vats = groups['vats'];
                                let vm;
                                while ((vm = RegexUtils_1.RegexUtils.fiscalReportVatDetailsPattern.exec(vats)) !== null) {
                                    if (vm.index === RegexUtils_1.RegexUtils.fiscalReportPattern.lastIndex) {
                                        RegexUtils_1.RegexUtils.fiscalReportPattern.lastIndex++;
                                    }
                                    let vatGroups = vm.groups;
                                    if (vatGroups) {
                                        let closureVat = new ClosureVat_1.ClosureVat();
                                        closureVat.id = parseInt(vatGroups['id']);
                                        closureVat.vat = vatGroups['vat'];
                                        if (vatGroups['total']) {
                                            closureVat.total = parseInt(vatGroups['total'].replace(/[\.,]/g, ''));
                                        }
                                        if (vatGroups['sellsGrandTotal']) {
                                            closureVat.sellsGrandTotal = parseInt(vatGroups['sellsGrandTotal'].replace(/[\.,]/g, ''));
                                        }
                                        if (vatGroups['sellsNetTotal']) {
                                            closureVat.sellsNetTotal = parseInt(vatGroups['sellsNetTotal'].replace(/[\.,]/g, ''));
                                        }
                                        if (vatGroups['sellsVatTotal']) {
                                            closureVat.sellsVatTotal = parseInt(vatGroups['sellsVatTotal'].replace(/[\.,]/g, ''));
                                        }
                                        closure.vats.push(closureVat);
                                    }
                                }
                            }
                            if (groups['payments']) {
                                let payments = groups['payments'];
                                let pm;
                                while ((pm = RegexUtils_1.RegexUtils.fiscalReportPaymentDetailsPattern.exec(payments)) !== null) {
                                    if (pm.index === RegexUtils_1.RegexUtils.fiscalReportPaymentDetailsPattern.lastIndex) {
                                        RegexUtils_1.RegexUtils.fiscalReportPaymentDetailsPattern.lastIndex++;
                                    }
                                    let paymentGroups = pm.groups;
                                    if (paymentGroups) {
                                        let clousurePayment = new ClosurePayment_1.ClosurePayment();
                                        clousurePayment.description = paymentGroups['description'];
                                        if (paymentGroups['value']) {
                                            clousurePayment.value = parseInt(paymentGroups['value'].replace(/[\.,]/g, ''));
                                        }
                                        closure.payments.push(clousurePayment);
                                    }
                                }
                            }
                            if (groups['discounts']) {
                                let discounts = groups['discounts'];
                                let dm;
                                while ((dm = RegexUtils_1.RegexUtils.fiscalReportDiscountDetailsPattern.exec(discounts)) !== null) {
                                    if (dm.index === RegexUtils_1.RegexUtils.fiscalReportDiscountDetailsPattern.lastIndex) {
                                        RegexUtils_1.RegexUtils.fiscalReportDiscountDetailsPattern.lastIndex++;
                                    }
                                    let discountGroups = dm.groups;
                                    if (discountGroups) {
                                        let clousureDiscount = new ClosureDiscount_1.ClosureDiscount();
                                        if (discountGroups['isPerc']) {
                                            clousureDiscount.isPerc = true;
                                        }
                                        if (discountGroups['value']) {
                                            clousureDiscount.value = parseInt(discountGroups['value'].replace(/[\.,]/g, ''));
                                        }
                                        closure.discounts.push(clousureDiscount);
                                    }
                                }
                            }
                            dgfe.closures.push(closure);
                        }
                    }
                }
                yield this.sendCommand(this.core.reg());
                yield this.sendCommand(this.core.clear());
            }
            catch (e) {
                console.error(e);
            }
            return dgfe;
        });
    }
    /**
     * @inheritdoc
     */
    getLastReceipt() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let result = {};
            try {
                yield this.sendCommand(this.core.prg());
                let sendCommandResult = yield this.sendCommand(this.core.getLastReceipt());
                if (sendCommandResult.isSuccess) {
                    let rows = sendCommandResult.responseBody.join('\n');
                    let m;
                    while ((m = RegexUtils_1.RegexUtils.fiscalDocumentPattern.exec(rows)) !== null) {
                        // This is necessary to avoid infinite loops with zero-width matches
                        if (m.index === RegexUtils_1.RegexUtils.fiscalDocumentPattern.lastIndex) {
                            RegexUtils_1.RegexUtils.fiscalDocumentPattern.lastIndex++;
                        }
                        let receipt = new _1.Receipt();
                        let groups = m.groups;
                        if (groups) {
                            result = this.fillReceipt(groups, receipt);
                        }
                    }
                }
                yield this.sendCommand(this.core.reg());
            }
            catch (e) {
                console.error(e);
            }
            return result;
        });
    }
    /**
     * @inheritdoc
     */
    fillReceipt(groups, receipt) {
        receipt.raw = groups['raw'];
        receipt.date = luxon_1.DateTime.fromFormat(groups['datetime'], 'dd-LL-yyyy HH:mm', {
            locale: 'it-IT',
        }).toJSDate();
        receipt.closure = parseInt(groups['closure']);
        receipt.number = parseInt(groups['number']);
        if (groups['grandTotal']) {
            receipt.grandTotal = parseInt(groups['grandTotal'].replace(/[\.,]/g, ''));
        }
        if (groups['vatTotal']) {
            receipt.vatTotal = parseInt(groups['vatTotal'].replace(/[\.,]/g, ''));
        }
        if (groups['paymentTotal']) {
            receipt.paymentTotal = parseInt(groups['paymentTotal'].replace(/[\.,]/g, ''));
        }
        if (groups['items']) {
            let items = groups['items'];
            let m;
            while ((m = RegexUtils_1.RegexUtils.fiscalDocumentItemsPattern.exec(items)) !== null) {
                // This is necessary to avoid infinite loops with zero-width matches
                if (m.index === RegexUtils_1.RegexUtils.fiscalDocumentPattern.lastIndex) {
                    RegexUtils_1.RegexUtils.fiscalDocumentPattern.lastIndex++;
                }
                let itemGroups = m.groups;
                if (itemGroups) {
                    let item = {};
                    item.description = itemGroups['description'];
                    if (itemGroups['vat']) {
                        item.vat = parseInt(itemGroups['vat']);
                    }
                    if (itemGroups['nature']) {
                        item.nature = itemGroups['nature'];
                    }
                    item.value = parseInt(itemGroups['value'].replace(/[\.,]/g, ''));
                    if (itemGroups['qty']) {
                        item.qty = parseInt(itemGroups['qty']);
                    }
                    if (itemGroups['unitValue']) {
                        item.unitValue = parseInt(itemGroups['unitValue'].replace(/[\.,]/g, ''));
                    }
                    if (itemGroups['discountDescription'] && itemGroups['discountPerc']) {
                        item.discount = {
                            description: itemGroups['discountDescription'],
                            percentage: parseInt(itemGroups['discountPerc']),
                        };
                        if (itemGroups['discountVat']) {
                            item.discount.vat = parseInt(itemGroups['discountVat']);
                        }
                        if (itemGroups['discountNature']) {
                            item.discount.nature = itemGroups['discountNature'];
                        }
                    }
                    if (itemGroups['discountDescription'] && itemGroups['discountValue']) {
                        item.discount = {
                            description: itemGroups['discountDescription'],
                            value: parseInt(itemGroups['discountValue'].replace(/[\.,]/g, '')),
                        };
                        if (itemGroups['discountVat']) {
                            item.discount.vat = parseInt(itemGroups['discountVat']);
                        }
                        if (itemGroups['discountNature']) {
                            item.discount.nature = itemGroups['discountNature'];
                        }
                    }
                    receipt.items.push(item);
                }
            }
        }
        if (groups['payments']) {
            let payments = groups['payments'];
            let m;
            while ((m = RegexUtils_1.RegexUtils.fiscalDocumentPaymentsPattern.exec(payments)) !== null) {
                // This is necessary to avoid infinite loops with zero-width matches
                if (m.index === RegexUtils_1.RegexUtils.fiscalDocumentPattern.lastIndex) {
                    RegexUtils_1.RegexUtils.fiscalDocumentPattern.lastIndex++;
                }
                let paymentsGroups = m.groups;
                if (paymentsGroups) {
                    let payment = {};
                    payment.description = paymentsGroups['description'];
                    payment.value = parseInt(paymentsGroups['value'].replace(/[\.,]/g, ''));
                    receipt.payments.push(payment);
                }
            }
        }
        return receipt;
    }
    /**
     * @inheritdoc
     */
    allProgramming() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                yield this.sendCommand(this.core.clear());
                yield this.sendCommand(this.core.prg());
                let result = yield this.sendCommand(this.core.allProgramming());
                yield this.sendCommand(this.core.clear());
                yield this.sendCommand(this.core.reg());
                if (!result.isSuccess) {
                    return null;
                }
                else {
                    return new Prog_1.Prog(result.responseBody);
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    printReceipt(bill, printDepartmentSubtotal = false, dumpResultFromDgfe = false) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let result = {};
            try {
                let commands = [];
                commands.push(this.core.clear());
                if (bill.isReturn && bill.returnInfo) {
                    commands.push(this.core.returnGoodsFromDTO(bill.returnInfo));
                }
                if (bill.isCancel && bill.returnInfo) {
                    commands.push(this.core.returnReceiptFromDTO(bill.returnInfo));
                }
                else {
                    if (bill.textBefore) {
                        bill.textBefore.forEach((item) => {
                            commands.push(this.core.printRowBeforeFiscalContent(item));
                        });
                    }
                    if (printDepartmentSubtotal) {
                        let billItemsGrouped = groupBy(bill.lineItems, (l) => l.departmentId);
                        let keys = Object.keys(billItemsGrouped);
                        keys.forEach((key) => {
                            billItemsGrouped[parseInt(key)].forEach((item) => {
                                commands.push(this.core.departmentSellFromLineItem(item));
                                if (item.discount) {
                                    if (item.discount.percent) {
                                        commands.push(this.core.discountPercentage(item.discount.percent, item.discount.description));
                                    }
                                    else if (item.discount.value) {
                                        commands.push(this.core.discountValue(item.discount.value, item.discount.description));
                                    }
                                }
                            });
                            commands.push(this.core.subtotal());
                        });
                    }
                    else {
                        bill.lineItems.forEach((item) => {
                            commands.push(this.core.departmentSellFromLineItem(item));
                            if (item.discount) {
                                if (item.discount.percent) {
                                    commands.push(this.core.discountPercentage(item.discount.percent, item.discount.description));
                                }
                                else if (item.discount.value) {
                                    commands.push(this.core.discountValue(item.discount.value, item.discount.description));
                                }
                            }
                        });
                    }
                    if (bill.lotteryCode) {
                        commands.push(this.core.lottery(bill.lotteryCode));
                    }
                }
                if (bill.paymentItems && !bill.isReturn && !bill.isCancel) {
                    bill.paymentItems.forEach((item) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        commands.push(this.core.paymentFromPaymentItem(item));
                    }));
                }
                else {
                    commands.push(this.core.cmd('=T1'));
                }
                if (bill.textAfter) {
                    bill.textAfter.forEach((item) => {
                        commands.push(this.core.printRowAfterTotal(item));
                    });
                }
                commands.push(this.core.closeReceipt());
                commands.push(this.core.terminateOperation());
                commands.push(this.core.clear());
                let sendCommandsResult = yield this.sendCommands(commands);
                if (dumpResultFromDgfe && sendCommandsResult.map((s) => s.isSuccess).reduce((previous, current) => previous && current, true)) {
                    result.receipt = yield this.getLastReceipt();
                }
            }
            catch (e) {
                console.error(e);
            }
            return result;
        });
    }
    /**
     * @inheritdoc
     */
    zReport() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let commands = [];
                commands.push(this.core.clear());
                commands.push(this.core.z());
                commands.push(this.core.zReport());
                commands.push(this.core.reg());
                commands.push(this.core.clear());
                let sendCommandsResult = yield this.sendCommands(commands);
                let result = sendCommandsResult.reduce((previous, current) => previous && current.isSuccess, true);
                return result;
            }
            catch (e) {
                console.error(e);
                return false;
            }
        });
    }
    /**
     * @inheritdoc
     */
    xReport() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let commands = [];
                commands.push(this.core.clear());
                commands.push(this.core.x());
                commands.push(this.core.xReport());
                commands.push(this.core.reg());
                commands.push(this.core.clear());
                let sendCommandsResult = yield this.sendCommands(commands);
                let result = sendCommandsResult.reduce((previous, current) => previous && current.isSuccess, true);
                return result;
            }
            catch (e) {
                console.error(e);
                return false;
            }
        });
    }
    /**
     * @inheritdoc
     */
    print(rows, cutPaper = false, header = false) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let commands = [];
                commands.push(this.core.clear());
                commands.push(this.core.reg());
                commands.push(this.core.openNonFiscalReceipt(cutPaper, header));
                rows.forEach((row) => {
                    commands.push(this.core.printRow(row));
                });
                commands.push(this.core.closeNonFiscalReceipt());
                commands.push(this.core.closeReceipt());
                commands.push(this.core.terminateOperation());
                commands.push(this.core.clear());
                let sendCommandsResult = yield this.sendCommands(commands);
                let result = sendCommandsResult.reduce((previous, current) => previous && current.isSuccess, true);
                return result;
            }
            catch (e) {
                console.error(e);
                return false;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getDeviceStatus() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.deviceStatus());
                if (result.isSuccess) {
                    return new DeviceStatus_1.DeviceStatus(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getCurrentDateTime() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getCurrentDateTime());
                if (result.isSuccess) {
                    return luxon_1.DateTime.fromFormat(result.response[0].data, 'dd/LL/yyyy HH:mm:ss').toJSDate();
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    getCurrentSubTotal() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getCurrentSubTotal());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getFwVersion() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getFirmwareRevision());
                if (result.isSuccess) {
                    return result.response[0].data;
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getSerialNumber() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getSerialNumber());
                if (result.isSuccess) {
                    return Utils_1.Utils.toRtFormat(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getCorrispettivoFiscale() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getCorrispettivoFiscale());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data.replace(/[\.,]/g, ''));
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getTotalReturns() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getTotalReturns());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data.replace(/[\.,]/g, ''));
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getTotalCancelled() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getTotalCancelled());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data.replace(/[\.,]/g, ''));
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getTotalCredits() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getTotalCredits());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data.replace(/[\.,]/g, ''));
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getTotalZeroingNumber() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getTotalZeroingNumber());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getGrandTotal() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getGrandTotal());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data.replace(/[\.,]/g, ''));
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getHwInitNumber() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getHwInitNumber());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getLastNotFiscalDocumentNumber() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getLastNotFiscalDocumentNumber());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getCashierNumber() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getCashierNumber());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getLastInvoiceNumber() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getLastInvoiceNumber());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getDailyCreditNoteNumber() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getDailyCreditNoteNumber());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getAnnualCreditNoteNumber() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getAnnualCreditNoteNumber());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getDgfeStatus() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.dgfeStatus());
                if (result.isSuccess) {
                    let dgfeStatus = parseInt(result.response[0].data);
                    if (dgfeStatus == 1)
                        return printer_1.DgfeStatus.FULL;
                    else if (dgfeStatus == 10)
                        return printer_1.DgfeStatus.WARNING;
                    else
                        return printer_1.DgfeStatus.OK;
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getDgfeFreeSpace() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.dgfeFreeSpace());
                if (result.isSuccess) {
                    return parseInt(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getDayLightSavingTimeAndPeriodCheck() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.periodicAssessmentStatus());
                if (result.isSuccess) {
                    return new DayLightSavingTimeAndPeriodCheck_1.DayLightSavingTimeAndPeriodCheck(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getPrinterStatus() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.printerStatus());
                if (result.isSuccess) {
                    return new PrinterStatus_1.PrinterStatus(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getRtStatus() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.rtStatus());
                if (result.isSuccess) {
                    return new printer_1.RTStatus(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getInactivityAndPendings() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.inactivityAndPendings());
                if (result.isSuccess) {
                    return new InactivityAndPendings_1.InactivityAndPendings(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getCommisioningDate() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.inServiceStatus());
                if (result.isSuccess) {
                    return luxon_1.DateTime.fromFormat(result.response[0].data, 'yyyy/LL/dd').toJSDate();
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getEthernetSettings() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = yield this.sendCommand(this.core.getEthernetSettings());
                if (result.isSuccess) {
                    return new printer_1.EthernetSettings(result.response[0].data);
                }
                else {
                    return null;
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    /**
     * @inheritdoc
     */
    getCashRegisterData() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                let result = {};
                result.deviceStatus = (_a = (yield this.getDeviceStatus())) !== null && _a !== void 0 ? _a : undefined;
                result.dateTime = (_b = (yield this.getCurrentDateTime())) !== null && _b !== void 0 ? _b : undefined;
                result.subtotal = (_c = (yield this.getCurrentSubTotal())) !== null && _c !== void 0 ? _c : undefined;
                result.fwVersion = (_d = (yield this.getFwVersion())) !== null && _d !== void 0 ? _d : undefined;
                result.serialNumber = (_e = (yield this.getSerialNumber())) !== null && _e !== void 0 ? _e : undefined;
                result.corrispettivoFiscale = (_f = (yield this.getCorrispettivoFiscale())) !== null && _f !== void 0 ? _f : undefined;
                result.totalReturns = (_g = (yield this.getTotalReturns())) !== null && _g !== void 0 ? _g : undefined;
                result.totalCancelled = (_h = (yield this.getTotalCancelled())) !== null && _h !== void 0 ? _h : undefined;
                result.totalCredits = (_j = (yield this.getTotalCredits())) !== null && _j !== void 0 ? _j : undefined;
                result.totalZeroingNumber = (_k = (yield this.getTotalZeroingNumber())) !== null && _k !== void 0 ? _k : undefined;
                result.grandTotal = (_l = (yield this.getGrandTotal())) !== null && _l !== void 0 ? _l : undefined;
                result.hwInitNumber = (_m = (yield this.getHwInitNumber())) !== null && _m !== void 0 ? _m : undefined;
                result.lastNotFiscalDocumentNumber = (_o = (yield this.getLastNotFiscalDocumentNumber())) !== null && _o !== void 0 ? _o : undefined;
                result.cashierNumber = (_p = (yield this.getCashierNumber())) !== null && _p !== void 0 ? _p : undefined;
                result.lastInvoiceNumber = (_q = (yield this.getLastInvoiceNumber())) !== null && _q !== void 0 ? _q : undefined;
                result.dailyCreditNoteNumber = (_r = (yield this.getDailyCreditNoteNumber())) !== null && _r !== void 0 ? _r : undefined;
                result.annualCreditNoteNumber = (_s = (yield this.getAnnualCreditNoteNumber())) !== null && _s !== void 0 ? _s : undefined;
                result.dgfeStatus = (_t = (yield this.getDgfeStatus())) !== null && _t !== void 0 ? _t : undefined;
                result.dgfeFreeSpace = (_u = (yield this.getDgfeFreeSpace())) !== null && _u !== void 0 ? _u : undefined;
                let dayLightSavingTimeAndPeriodCheck = yield this.getDayLightSavingTimeAndPeriodCheck();
                if (dayLightSavingTimeAndPeriodCheck) {
                    result.daylightSavingTime = dayLightSavingTimeAndPeriodCheck.daylightSavingTime;
                    result.periodicCheck = dayLightSavingTimeAndPeriodCheck.periodicCheck;
                }
                result.printerStatus = (_v = (yield this.getPrinterStatus())) !== null && _v !== void 0 ? _v : undefined;
                result.rtStatus = (_w = (yield this.getRtStatus())) !== null && _w !== void 0 ? _w : undefined;
                let inactivityAndPendings = yield this.getInactivityAndPendings();
                if (inactivityAndPendings) {
                    result.inactive = inactivityAndPendings.inactive;
                    result.pendingFiles = inactivityAndPendings.pendingFiles;
                    result.maxPendingFiles = inactivityAndPendings.maxPendingFiles;
                    result.firstPendingFileDateTime = inactivityAndPendings.firstPendingFileDateTime;
                }
                result.commissioningDate = (_x = (yield this.getCommisioningDate())) !== null && _x !== void 0 ? _x : undefined;
                result.ethernetSettings = (_y = (yield this.getEthernetSettings())) !== null && _y !== void 0 ? _y : undefined;
                return result;
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
    onCommand(rchProtocol) {
        this.commandEventListeners.forEach((listner) => listner(rchProtocol));
    }
    timeout(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
    readData(bytesRead) {
        this.isETX = false;
        let result = [];
        bytesRead.forEach((b) => {
            if (b != ComConst_1.ComConst.CHR_ACK && b != ComConst_1.ComConst.CHR_STX && b != ComConst_1.ComConst.CHR_ETX && b != ComConst_1.ComConst.CHR_LF && b != ComConst_1.ComConst.CHR_NACK && b != ComConst_1.ComConst.CHR_CR) {
                this.buffer.push(b);
            }
            if (b == ComConst_1.ComConst.CHR_CR || b == ComConst_1.ComConst.CHR_LF || b == ComConst_1.ComConst.CHR_ETX) {
                if (this.buffer.length > 0) {
                    let response = Buffer.from(this.buffer).toString('ascii');
                    result.push(response);
                    this.buffer = [];
                }
                if (b == ComConst_1.ComConst.CHR_ETX) {
                    this.isETX = true;
                }
            }
        });
        return result;
    }
}
exports.Driver = Driver;
//# sourceMappingURL=Driver.js.map