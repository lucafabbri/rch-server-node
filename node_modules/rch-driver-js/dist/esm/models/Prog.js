"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Prog = void 0;
const AbstractParser_1 = require("./AbstractParser");
const CourtesyLine_1 = require("./CourtesyLine");
const Department_1 = require("./Department");
const Group_1 = require("./Group");
const HeadingRow_1 = require("./HeadingRow");
const InvoiceText_1 = require("./InvoiceText");
const Operator_1 = require("./Operator");
const Payment_1 = require("./Payment");
const Vat_1 = require("./Vat");
const XMLSendSchedule_1 = require("./XMLSendSchedule");
/**
 * @inheritdoc
 *
 * @export
 * @class Prog
 * @typedef {Prog}
 * @extends {AbstractParser}
 * @implements {IProg}
 */
class Prog extends AbstractParser_1.AbstractParser {
    /**
     * Creates an instance of Prog.
     * @date 1/11/2022 - 12:17:15 PM
     *
     * @constructor
     * @param {...any[]} entries
     */
    constructor(...entries) {
        var _a;
        super();
        /**
         * @inheritdoc
         */
        this.statDepartment = null;
        /**
         * @inheritdoc
         */
        this.statVat = null;
        /**
         * @inheritdoc
         */
        this.statHour = null;
        /**
         * @inheritdoc
         */
        this.statClerk = null;
        /**
         * @inheritdoc
         */
        this.statFinancial = null;
        /**
         * @inheritdoc
         */
        this.statGrpDetail = null;
        /**
         * @inheritdoc
         */
        this.statGrpTot = null;
        /**
         * @inheritdoc
         */
        this.logo = [];
        /**
         * @inheritdoc
         */
        this.courtesyLine = [];
        /**
         * @inheritdoc
         */
        this.slidingMsg = null;
        /**
         * @inheritdoc
         */
        this.percDiscount = 0;
        /**
         * @inheritdoc
         */
        this.percAddon = 0;
        /**
         * @inheritdoc
         */
        this.drawerPulse = 0;
        /**
         * @inheritdoc
         */
        this.eCRNum = 0;
        /**
         * @inheritdoc
         */
        this.intInvoice = false;
        /**
         * @inheritdoc
         */
        this.invoice2Lines = false;
        /**
         * @inheritdoc
         */
        this.invoiceSubtotal = false;
        /**
         * @inheritdoc
         */
        this.invoiceClientCheck = false;
        /**
         * @inheritdoc
         */
        this.fidelity = null;
        /**
         * @inheritdoc
         */
        this.pcsOperatorPrint = null;
        /**
         * @inheritdoc
         */
        this.kbdPrebill = null;
        /**
         * @inheritdoc
         */
        this.periodCheck = null;
        /**
         * @inheritdoc
         */
        this.printECRNum = false;
        /**
         * @inheritdoc
         */
        this.singleQuantity = false;
        /**
         * @inheritdoc
         */
        this.printUnitPrice = null;
        /**
         * @inheritdoc
         */
        this.showChange = false;
        /**
         * @inheritdoc
         */
        this.mandSubtotal = null;
        /**
         * @inheritdoc
         */
        this.cutter = null;
        /**
         * @inheritdoc
         */
        this.midnightAlert = false;
        /**
         * @inheritdoc
         */
        this.creditNote = null;
        /**
         * @inheritdoc
         */
        this.creditNoteProgressive = 0;
        /**
         * @inheritdoc
         */
        this.cashDeclaration = null;
        /**
         * @inheritdoc
         */
        this.printBuffer = null;
        /**
         * @inheritdoc
         */
        this.departmentNet = null;
        /**
         * @inheritdoc
         */
        this.appendixCut = null;
        /**
         * @inheritdoc
         */
        this.vatVentilation = null;
        /**
         * @inheritdoc
         */
        this.printLastReceiptFromDGFE = null;
        /**
         * @inheritdoc
         */
        this.invoiceProgressive = 0;
        /**
         * @inheritdoc
         */
        this.receiptLimit = 0;
        /**
         * @inheritdoc
         */
        this.xMLSendSchedule = null;
        /**
         * @inheritdoc
         */
        this.invoiceText = [];
        /**
         * @inheritdoc
         */
        this.departments = [];
        /**
         * @inheritdoc
         */
        this.vats = [];
        /**
         * @inheritdoc
         */
        this.operators = [];
        /**
         * @inheritdoc
         */
        this.payments = [];
        /**
         * @inheritdoc
         */
        this.groups = [];
        /**
         * @inheritdoc
         */
        this.courtesyLines = [];
        /**
         * @inheritdoc
         */
        this.headings = [];
        this.departments = [];
        this.vats = [];
        this.operators = [];
        this.payments = [];
        this.groups = [];
        this.headings = [];
        for (var i = 1; i <= 13; i++) {
            this.headings.push({ id: i });
        }
        this.courtesyLines.push({ id: 1, name: 'linea di cortesia 1' });
        this.courtesyLines.push({ id: 2, name: 'linea di cortesia 2' });
        this.slidingMsg = { name: 'Messaggio scorrevole', value: 1 };
        this.statDepartment = false;
        this.statClerk = false;
        this.statFinancial = false;
        this.statGrpDetail = false;
        this.statGrpTot = false;
        this.statHour = false;
        this.statVat = false;
        this.printUnitPrice = true;
        this.mandSubtotal = false;
        this.cutter = false;
        this.creditNote = false;
        this.cashDeclaration = false;
        this.printBuffer = true;
        this.departmentNet = false;
        this.appendixCut = true;
        this.vatVentilation = false;
        this.printLastReceiptFromDGFE = true;
        this.drawerPulse = 2;
        this.eCRNum = 1;
        this.xMLSendSchedule = {
            enabled: true,
            endHour: 30,
            hours: 40,
            minutes: 50,
            startHour: 50,
            standBy: 10,
        };
        if (entries.length == 1) {
            var rows = entries[0];
            for (var i = 0; i < rows.length; i++) {
                var entry = rows[i];
                try {
                    switch (entry.charAt(0)) {
                        case 'R':
                            this.departments.push(new Department_1.Department(entry, rows[i + 1]));
                            i++;
                            break;
                        case 't':
                            if (!this.courtesyLine) {
                                this.courtesyLine = [];
                            }
                            this.courtesyLine.push(new CourtesyLine_1.CourtesyLine(entry, rows[i + 1]));
                            i++;
                            break;
                        case 'H':
                            var row = new HeadingRow_1.HeadingRow(entry, rows[i + 1]);
                            try {
                                let heading = (_a = this.headings) === null || _a === void 0 ? void 0 : _a.find((h) => h.id == row.id);
                                if (heading) {
                                    heading.name = row.name;
                                }
                            }
                            catch (_b) {
                                //silent is golden
                            }
                            i++;
                            break;
                        case 'V':
                            this.vats.push(new Vat_1.Vat(entry));
                            break;
                        case 'T':
                            this.payments.push(new Payment_1.Payment(entry));
                            break;
                        case 'O':
                            this.operators.push(new Operator_1.Operator(entry));
                            break;
                        case 'C':
                            switch (entry.substring(0, 4)) {
                                case 'C117':
                                    this.statClerk = entry.charAt(4) == '1';
                                    this.statDepartment = entry.charAt(5) == '1';
                                    this.statFinancial = entry.charAt(6) == '1';
                                    this.statHour = entry.charAt(7) == '1';
                                    this.statVat = entry.charAt(8) == '1';
                                    this.statGrpDetail = entry.charAt(10) == '1';
                                    this.statGrpTot = entry.charAt(11) == '1';
                                    break;
                                case 'C118':
                                    break;
                                case 'C119':
                                    break;
                                case 'C120':
                                    break;
                                case 'C121':
                                    break;
                                case 'C122':
                                    this.drawerPulse = this.indexChartToInt(entry.charCodeAt(4));
                                    break;
                                case 'C125':
                                    break;
                                case 'C126':
                                    this.midnightAlert = entry.charAt(4) == '1';
                                    break;
                                case 'C130':
                                    this.invoiceProgressive = parseInt(entry.substring(15, 20));
                                    break;
                                case 'C132':
                                    this.printECRNum = entry.charAt(4) == '1';
                                    this.eCRNum = parseInt(entry.substring(5, 8));
                                    break;
                                case 'C133':
                                    this.invoiceSubtotal = entry.charAt(4) == '1';
                                    break;
                                case 'C135':
                                    this.receiptLimit = this.parseIntWithDecimal(entry.substring(10, 20));
                                    break;
                                case 'C136':
                                    this.showChange = entry.charAt(4) == '1';
                                    break;
                                case 'C137':
                                    if (!this.groups) {
                                        this.groups = [];
                                    }
                                    this.groups.push(new Group_1.Group(entry));
                                    break;
                                case 'C138':
                                    this.departmentNet = entry.charAt(4) == '1';
                                    break;
                                case 'C139':
                                    this.creditNoteProgressive = parseInt(entry.substring(10, 20));
                                    break;
                                case 'C159':
                                    this.creditNote = entry.charAt(4) == '1';
                                    break;
                                case 'C170':
                                    this.appendixCut = entry.charAt(4) == '1';
                                    break;
                                case 'C808':
                                    this.xMLSendSchedule = new XMLSendSchedule_1.XMLSendSchedule(entry);
                                    break;
                                case 'C822':
                                    this.vatVentilation = entry.charAt(4) == '1';
                                    break;
                                case 'C912':
                                    break;
                                case 'C917':
                                    this.invoice2Lines = entry.charAt(5) == '1';
                                    this.intInvoice = entry.charAt(6) == '1';
                                    this.invoiceSubtotal = entry.charAt(8) == '1';
                                    this.invoiceClientCheck = entry.charAt(10) == '1';
                                    break;
                                case 'C918':
                                    if (!this.invoiceText) {
                                        this.invoiceText = [];
                                    }
                                    this.invoiceText.push(new InvoiceText_1.InvoiceText(entry, rows[i + 1]));
                                    i++;
                                    break;
                                case 'C927':
                                    this.singleQuantity = entry.charAt(4) == '1';
                                    this.printUnitPrice = entry.charAt(5) == '1';
                                    break;
                                case 'C928':
                                    break;
                                case 'C932':
                                    this.printBuffer = entry.charAt(4) == '1';
                                    break;
                                case 'C933':
                                    this.fidelity = entry.charAt(4) == '1';
                                    break;
                                case 'C934':
                                    break;
                                case 'C935':
                                    this.printLastReceiptFromDGFE = entry.charAt(4) == '1';
                                    break;
                                case 'C980':
                                    this.cashDeclaration = entry.charAt(4) == '1';
                                    break;
                                case 'C988':
                                    this.pcsOperatorPrint = entry.charAt(4) == '1';
                                    break;
                                case 'C996':
                                    break;
                                case 'C997':
                                    this.cutter = entry.charAt(4) == '1';
                                    break;
                            }
                            break;
                    }
                }
                catch (_c) {
                    //silent is golden
                }
            }
        }
    }
}
exports.Prog = Prog;
//# sourceMappingURL=Prog.js.map