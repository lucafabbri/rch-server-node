/// <reference types="node" />
import { EcrDevice } from './EcrDevice';
import { IDriver } from './IDriver';
import { IEcrDevice } from './IEcrDevice';
import { RchProtocol } from './protocol/RchProtocol';
import { IProg } from './interfaces/IProg';
import { PrintBillResponseDTO } from './dto/PrintBillResponseDTO';
import { Duplex } from 'stream';
import { PrinterStatus } from './printer/PrinterStatus';
import { DeviceStatus } from './printer/DeviceStatus';
import { DgfeStatus, RTStatus, EthernetSettings, CashRegister } from './printer';
import { DayLightSavingTimeAndPeriodCheck } from './printer/DayLightSavingTimeAndPeriodCheck';
import { InactivityAndPendings } from './printer/InactivityAndPendings';
import { ConnectionConst } from './ConnectionConst';
import { Dgfe, Receipt, DeviceType } from '.';
import { ProgCommand } from './models/ProgCommand';
import { DriverConfiguration } from './DriverConfiguration';
import { BillDTO, Core, RowDTO } from 'rch-driver-js-core';
/**
 * Driver
 * @date 1/11/2022 - 2:22:47 AM
 *
 * @module rch-driver-js
 * @export
 * @class Driver
 * @typedef {Driver}
 * @implements {IDriver}
 */
export declare class Driver implements IDriver {
    connection: ConnectionConst;
    comPort?: string;
    baudRate?: number;
    ip?: string;
    ipPort?: number;
    packIds: string;
    packId: number;
    commandEventListeners: Function[];
    isETX: boolean;
    buffer: number[];
    sessionCommands: {
        [key: string]: RchProtocol[];
    };
    logTag: string;
    client: Duplex | null;
    core: Core;
    /**
     * Creates an instance of Driver.
     * @date 1/11/2022 - 3:58:28 PM
     */
    constructor();
    /**
     * @inheritdoc
     */
    buildProgCommands(prog: IProg, printerType: DeviceType, sendHeadings: boolean): ProgCommand[];
    private validateTender;
    private validateDepartment;
    private initConnection;
    /**
     * @inheritdoc
     */
    open(configuration: DriverConfiguration): Promise<boolean>;
    /**
     * @inheritdoc
     */
    close(): Promise<boolean>;
    /**
     * @inheritdoc
     */
    discovery(): Promise<IEcrDevice[]>;
    /**
     * @inheritdoc
     */
    discoverByIp(ip: string): Promise<IEcrDevice | null>;
    /**
     * @inheritdoc
     */
    addCommandEventListener(listner: Function): Function;
    /**
     * @inheritdoc
     */
    sendCommand(command: string): Promise<RchProtocol>;
    /**
     * @inheritdoc
     */
    sendCommands(commands: string[]): Promise<Array<RchProtocol>>;
    /**
     * @inheritdoc
     */
    formatCommandToByteArray(command: string): number[];
    protected setTimeOut(command: string): number;
    private calculateBcc;
    protected populateDevice(device: EcrDevice): Promise<EcrDevice | null>;
    /**
     * @inheritdoc
     */
    dumpDGFE(from: Date, to: Date): Promise<Dgfe>;
    /**
     * @inheritdoc
     */
    getLastReceipt(): Promise<Receipt>;
    /**
     * @inheritdoc
     */
    private fillReceipt;
    /**
     * @inheritdoc
     */
    allProgramming(): Promise<IProg | null>;
    /**
     * @inheritdoc
     */
    printReceipt(bill: BillDTO, printDepartmentSubtotal?: boolean, dumpResultFromDgfe?: boolean): Promise<PrintBillResponseDTO>;
    /**
     * @inheritdoc
     */
    zReport(): Promise<boolean>;
    /**
     * @inheritdoc
     */
    xReport(): Promise<boolean>;
    /**
     * @inheritdoc
     */
    print(rows: string[] | RowDTO[], cutPaper?: boolean, header?: boolean): Promise<boolean>;
    /**
     * @inheritdoc
     */
    getDeviceStatus(): Promise<DeviceStatus | null>;
    /**
     * @inheritdoc
     */
    getCurrentDateTime(): Promise<Date | null>;
    getCurrentSubTotal(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getFwVersion(): Promise<string | null>;
    /**
     * @inheritdoc
     */
    getSerialNumber(): Promise<string | null>;
    /**
     * @inheritdoc
     */
    getCorrispettivoFiscale(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getTotalReturns(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getTotalCancelled(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getTotalCredits(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getTotalZeroingNumber(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getGrandTotal(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getHwInitNumber(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getLastNotFiscalDocumentNumber(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getCashierNumber(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getLastInvoiceNumber(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getDailyCreditNoteNumber(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getAnnualCreditNoteNumber(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getDgfeStatus(): Promise<DgfeStatus | null>;
    /**
     * @inheritdoc
     */
    getDgfeFreeSpace(): Promise<number | null>;
    /**
     * @inheritdoc
     */
    getDayLightSavingTimeAndPeriodCheck(): Promise<DayLightSavingTimeAndPeriodCheck | null>;
    /**
     * @inheritdoc
     */
    getPrinterStatus(): Promise<PrinterStatus | null>;
    /**
     * @inheritdoc
     */
    getRtStatus(): Promise<RTStatus | null>;
    /**
     * @inheritdoc
     */
    getInactivityAndPendings(): Promise<InactivityAndPendings | null>;
    /**
     * @inheritdoc
     */
    getCommisioningDate(): Promise<Date | null>;
    /**
     * @inheritdoc
     */
    getEthernetSettings(): Promise<EthernetSettings | null>;
    /**
     * @inheritdoc
     */
    getCashRegisterData(): Promise<CashRegister | null>;
    protected onCommand(rchProtocol: RchProtocol): void;
    protected timeout(ms: number): Promise<unknown>;
    protected readData(bytesRead: Buffer): string[];
}
