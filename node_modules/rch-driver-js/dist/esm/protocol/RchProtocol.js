"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RchProtocol = void 0;
const RchMessage_1 = require("./RchMessage");
const RchStatus_1 = require("./RchStatus");
/**
 * Represents the a complete request/response in RCH Protocol
 * @date 1/11/2022 - 2:06:01 PM
 *
 * @export
 * @class RchProtocol
 * @typedef {RchProtocol}
 */
class RchProtocol {
    /**
     * Creates an instance of RchProtocol.
     * @date 1/11/2022 - 2:10:59 PM
     *
     * @constructor
     * @param {string} request
     */
    constructor(request) {
        this.request = new RchMessage_1.RchMessage(request);
        this.response = [];
    }
    /**
     * Check responses are of the same packetid sent in request
     * @date 1/11/2022 - 2:08:20 PM
     *
     * @readonly
     * @type {boolean}
     */
    get areResponsesMatchingPacketId() {
        return this.response
            .map((r) => r.packetId == this.request.packetIdModulus)
            .reduce((a, m) => a && m, true);
    }
    /**
     * Get the response body as array of strings.
     * It is used for dump responses.
     * @date 1/11/2022 - 2:08:46 PM
     *
     * @readonly
     * @type {string[]}
     */
    get responseBody() {
        var _a, _b;
        return (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.filter((r) => r.isDump).map((r) => r.data)) !== null && _b !== void 0 ? _b : [];
    }
    /**
     * Get the resposne body as a single string with Carriage return \n.
     * It is used for dump responses.
     * @date 1/11/2022 - 2:09:17 PM
     *
     * @readonly
     * @type {string}
     */
    get responseBodyString() {
        return this.responseBody.join('\n');
    }
    /**
     * Get the status of the printer which is always passed in non dump response.
     * @date 1/11/2022 - 2:09:59 PM
     *
     * @readonly
     * @type {RchStatus}
     */
    get status() {
        if (this.response.length > 0) {
            var controlCode = this.response[this.response.length - 1].controlCode;
            switch (controlCode) {
                case 'G':
                    return RchStatus_1.RchStatus.PRINTER_BUSY;
                case 'S':
                    return RchStatus_1.RchStatus.PRINTER_BLOCKED;
                case 'P':
                    return RchStatus_1.RchStatus.PRINTER_PAPER_OVER;
                case 'C':
                    return RchStatus_1.RchStatus.PRINTER_COVER_OPEN;
                case 'O':
                case 'N':
                default:
                    return RchStatus_1.RchStatus.OK;
            }
        }
        else {
            return RchStatus_1.RchStatus.PENDING;
        }
    }
    /**
     * Return the status of the call
     * @date 1/11/2022 - 2:10:26 PM
     *
     * @readonly
     * @type {boolean}
     */
    get isSuccess() {
        return this.status == RchStatus_1.RchStatus.OK;
    }
}
exports.RchProtocol = RchProtocol;
//# sourceMappingURL=RchProtocol.js.map