"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RchMessage = void 0;
const __1 = require("..");
const Utils_1 = require("../Utils");
/**
 * Encapsulate a protocol message
 * @date 1/11/2022 - 12:40:19 PM
 *
 * @export
 * @class RchMessage
 * @typedef {RchMessage}
 */
class RchMessage {
    /**
     * Creates an instance of RchMessage.
     * @date 1/11/2022 - 12:48:36 PM
     *
     * @constructor
     * @param {string} raw
     */
    constructor(raw) {
        var _a;
        /**
         * Packet id it can be a value between [0-9a-zA-Z]
         * The printer will send back the Packet Id Modulus
         * @date 1/11/2022 - 12:42:01 PM
         *
         * @type {string}
         */
        this.packetId = "";
        /**
         * Packet id Modulus equals to PachetId Hex Value % 10
         * @date 1/11/2022 - 12:42:55 PM
         *
         * @type {string}
         */
        this.packetIdModulus = "";
        /**
         * Wheteher the Checksum is verified against the calculated
         * @date 1/11/2022 - 12:44:13 PM
         *
         * @type {boolean}
         */
        this.checksumVerified = false;
        /**
         * Error Type
         * N = no error
         * G = generic error
         * S = blocking error
         * P = paper out
         * @date 1/11/2022 - 12:44:57 PM
         *
         * @type {?string}
         */
        this.errorType = "";
        /**
         * Error Code 3 digits see protocol documentation
         * @date 1/11/2022 - 12:45:05 PM
         *
         * @type {?string}
         */
        this.errorCode = "";
        /**
         * Whether another message follows, only for responses
         * @date 1/11/2022 - 12:46:39 PM
         *
         * @type {boolean}
         */
        this.follow = false;
        /**
         * Data Package
         * @date 1/11/2022 - 12:47:14 PM
         *
         * @type {string}
         */
        this.data = "";
        const regex = /^(?<adds>\d{2})(?<length>\d{3})(?<protocol>[a-zA-Z])(?<controlCode>[\x20-\x7F])(?<data>((?<errorType>[NGSP])(?<errorCode>[0-9]{4})(?<receiptStatus>[0-9]{2})(?<follow>[01])[\x20-\x7F])|[\x20-\x7F]*)(?<packetId>[0-9a-zA-Z])(?<checksum>[0-9A-F]{2})$/;
        this.raw = raw;
        this.data = raw;
        this.length = raw.length;
        this.isDump = !regex.test(raw);
        if (!this.isDump) {
            var match = regex.exec(raw);
            if (match != undefined) {
                var groups = match.groups;
                if (groups != undefined) {
                    this.adds = parseInt(groups["adds"]);
                    this.length = parseInt(groups["length"]);
                    this.protocol = groups["protocol"];
                    this.data = groups["data"];
                    if (groups["packetId"]) {
                        this.packetId = groups['packetId'];
                        let code = (_a = this.packetId) === null || _a === void 0 ? void 0 : _a.charCodeAt(0);
                        if (code) {
                            this.packetIdModulus = (code % 10).toString();
                        }
                    }
                    this.checksum = groups["checksum"];
                    this.checksumCalculated = Utils_1.Utils.calculateBccFromString(Buffer.from([__1.ComConst.CHR_STX]).toString("ascii") + raw.slice(0, raw.length - 2));
                    if (this.checksum) {
                        this.checksumVerified = this.checksumCalculated == this.checksum;
                    }
                    this.controlCode = groups["controlCode"];
                    this.errorCode = groups["errorCode"];
                    this.errorType = groups["errorType"];
                    if (groups["receiptStatus"]) {
                        this.receiptStatus = parseInt(groups["receiptStatus"]);
                    }
                    if (groups["follow"]) {
                        this.follow = groups["follow"] == '1';
                    }
                }
            }
        }
    }
    /**
     * Return if it is error, in error response the control code is E
     * @date 1/11/2022 - 12:47:39 PM
     *
     * @readonly
     * @type {boolean}
     */
    get isError() {
        if (this.controlCode) {
            return this.controlCode == 'E';
        }
        else {
            return false;
        }
    }
}
exports.RchMessage = RchMessage;
//# sourceMappingURL=RchMessage.js.map