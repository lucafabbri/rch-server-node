import { RchMessage } from "./RchMessage";
import { RchStatus } from "./RchStatus";
/**
 * Represents the a complete request/response in RCH Protocol
 * @date 1/11/2022 - 2:06:01 PM
 *
 * @export
 * @class RchProtocol
 * @typedef {RchProtocol}
 */
export declare class RchProtocol {
    /**
     * The request message
     * @date 1/11/2022 - 2:06:38 PM
     *
     * @type {RchMessage}
     */
    request: RchMessage;
    /**
     * The response messages. They might include dumps, responses or errors
     * @date 1/11/2022 - 2:07:56 PM
     *
     * @type {RchMessage[]}
     */
    response: RchMessage[];
    /**
     * Check responses are of the same packetid sent in request
     * @date 1/11/2022 - 2:08:20 PM
     *
     * @readonly
     * @type {boolean}
     */
    get areResponsesMatchingPacketId(): boolean;
    /**
     * Get the response body as array of strings.
     * It is used for dump responses.
     * @date 1/11/2022 - 2:08:46 PM
     *
     * @readonly
     * @type {string[]}
     */
    get responseBody(): string[];
    /**
     * Get the resposne body as a single string with Carriage return \n.
     * It is used for dump responses.
     * @date 1/11/2022 - 2:09:17 PM
     *
     * @readonly
     * @type {string}
     */
    get responseBodyString(): string;
    /**
     * Get the status of the printer which is always passed in non dump response.
     * @date 1/11/2022 - 2:09:59 PM
     *
     * @readonly
     * @type {RchStatus}
     */
    get status(): RchStatus;
    /**
     * Return the status of the call
     * @date 1/11/2022 - 2:10:26 PM
     *
     * @readonly
     * @type {boolean}
     */
    get isSuccess(): boolean;
    /**
     * Creates an instance of RchProtocol.
     * @date 1/11/2022 - 2:10:59 PM
     *
     * @constructor
     * @param {string} request
     */
    constructor(request: string);
}
