import { ReceiptStatus } from "../printer/ReceiptStatus";
/**
 * Encapsulate a protocol message
 * @date 1/11/2022 - 12:40:19 PM
 *
 * @export
 * @class RchMessage
 * @typedef {RchMessage}
 */
export declare class RchMessage {
    /**
     * Address of the printer
     * @date 1/11/2022 - 12:40:29 PM
     *
     * @type {(number)}
     */
    adds?: number;
    /**
     * The length of the data
     * @date 1/11/2022 - 12:41:32 PM
     *
     * @type {number}
     */
    length: number;
    /**
     * Type of protocol 'N' stands for New protocol
     * @date 1/11/2022 - 12:41:47 PM
     *
     * @type {?string}
     */
    protocol?: string;
    /**
     * Packet id it can be a value between [0-9a-zA-Z]
     * The printer will send back the Packet Id Modulus
     * @date 1/11/2022 - 12:42:01 PM
     *
     * @type {string}
     */
    packetId: string;
    /**
     * Packet id Modulus equals to PachetId Hex Value % 10
     * @date 1/11/2022 - 12:42:55 PM
     *
     * @type {string}
     */
    packetIdModulus: string;
    /**
     * Checksum calculated including all fields but checksum itself and ETX (STX is included)
     * @date 1/11/2022 - 12:43:24 PM
     *
     * @type {?string}
     */
    checksum?: string;
    /**
     * The calculated Checksum to counter proof
     * @date 1/11/2022 - 12:43:55 PM
     *
     * @type {?string}
     */
    checksumCalculated?: string;
    /**
     * Wheteher the Checksum is verified against the calculated
     * @date 1/11/2022 - 12:44:13 PM
     *
     * @type {boolean}
     */
    checksumVerified: boolean;
    /**
     * Control code represents usually the family of commands in non dump messages
     * @date 1/11/2022 - 12:44:30 PM
     *
     * @type {?string}
     */
    controlCode?: string;
    /**
     * Error Type
     * N = no error
     * G = generic error
     * S = blocking error
     * P = paper out
     * @date 1/11/2022 - 12:44:57 PM
     *
     * @type {?string}
     */
    errorType?: string;
    /**
     * Error Code 3 digits see protocol documentation
     * @date 1/11/2022 - 12:45:05 PM
     *
     * @type {?string}
     */
    errorCode?: string;
    /**
     * The status of the receipt
     * @date 1/11/2022 - 12:46:30 PM
     *
     * @type {?ReceiptStatus}
     */
    receiptStatus?: ReceiptStatus;
    /**
     * Whether another message follows, only for responses
     * @date 1/11/2022 - 12:46:39 PM
     *
     * @type {boolean}
     */
    follow: boolean;
    /**
     * Data Package
     * @date 1/11/2022 - 12:47:14 PM
     *
     * @type {string}
     */
    data: string;
    /**
     * Raw message excluding STX and ETX
     * @date 1/11/2022 - 12:47:20 PM
     *
     * @type {string}
     */
    raw: string;
    /**
     * Return if it is error, in error response the control code is E
     * @date 1/11/2022 - 12:47:39 PM
     *
     * @readonly
     * @type {boolean}
     */
    get isError(): boolean;
    /**
     * Whether the message is a non protocol text message
     * @date 1/11/2022 - 12:48:13 PM
     *
     * @type {boolean}
     */
    isDump: boolean;
    /**
     * Creates an instance of RchMessage.
     * @date 1/11/2022 - 12:48:36 PM
     *
     * @constructor
     * @param {string} raw
     */
    constructor(raw: string);
}
